themeMode: ThemeMode.light/dark,
theme: ThemeData(primerySwatch: Colors.red),
darkTheme: ThemeData(brightness: Brightness.dark),



routes:{
"/": (context)=>Login_Page(),
"/home":(context)=>Home_Page(),
MyRoutes.home:(context)=>Home_Page(),
MyRoutes.login:(context)=>Login_Page(),
},



style: TextStyle(
fontSize: 30,
color: Colors.red,
fontWeight: FontWeight.bold,
),

textScaleFactor: 1.5,



primaryTextTheme: GoogleFonts.latoTextTheme()
fontFamily: GoogleFonts.lato().fontFamily,



SizedBox(
height: 20.0,
)



Padding(padding: const EdgeInsets.symmetric(
vertical: 16,horizontal: 30),
child: Column(
children: [
TextFormField(
decoratin: InputDecoration(
hintText: "Enter UserName",
labelTex: "UserName",
),
),
TextFormField(
obscureText: true,
decoration: InputDecoration(
hintText: "Enter Password",
labelText: "Password",
),),
],
),),



SingleChildScrollView(),



Routing at One Page to another
{
	class MyRoutes
	{
		static String login="/login";
		static String home="/home";
	}


	MyRoutes.home:(context)=>Home_Page(),
	MyRoutes.login:(context)=>Login_Page(),


	Navigator:pushName(context, MyRoutes.home);
}



ElevetedButton(
child: Text("Login"),
style: TextButton.styleFrom(),
onPressed:(){  },
),


shape: changeButton? BoxShape.circle : BoxShape.rectangle,

child: changButton ? Icon( Icons.done, color: Colors.White, )



Form{

final _formKey=GlobalKey<FormState>();

key: _formKey,

moveToHome(BuildContext context) 
{ 
	if(_formKey.currentState!.validate()) 
	{  
	
	}
}

validator: (value)
{
  bool isEmpty = value?.isEmpty ?? fales;
  is(isEmpty)
  {
    return "Password can't be empty";
  }
  else if((value?.length ?? 0) <8){
    return"Password < 8";
  }
  else{
    return null;
  }
}

validator: (value) { 
bool isEmpty = value?.isEmpty??false;
  if(isEmpty)
 {
   return "Username can't be Empty"; 
  }
  else
  {
    return null;
   }
}



elevation // Used in shadow effect

return Drawer(
child: ListView(),
children:[
DrawerHeader(
padding: EdgeInsets.zero,
child: UserAccountsDrawerHeader(
        accountName: Text(
        "Ankit Saklan"
    ),
      accoutnEmail: Text(
      "sa@gmail.com"
      ),

     |-currentAccountPicture: CircleAvatar(
     |	backgroundImage: NetworkImage(img)),
     |
     |-currentAccountPicture: Image.network(img)),
),
],
),



ListTile=>

ListTile(
leading:Icon(CupationIcons.home,
color: Colors.white,
),
title:Text("Home"),

)



elevation : 0.0,
iconTheme: IconThemeData(color:Colors.black),


aapBar: AppBar(
backgroundColor: Colors.white,
elevation: 0.0,
iconTheme: IconThemeData(color: Colors.black),
),



appBarTheme: AppBarTheme(
color: Colors.white,
elevation: 0.0,
iconTheme: IconThemeData(color: Colors.black),

// textTheme: Theme.of(context).textTheme,

toolbarTextStyle: Theme.of(context).textTheme.bodyMedium, 
titleTextStyle: Theme.of(context).textTheme.titleLarge,

),
